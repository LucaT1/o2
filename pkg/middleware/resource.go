package middleware

import (
	"net/http"

	"github.com/kataras/muxie"
	"github.com/lucat1/o2/pkg/models"
	uuid "github.com/satori/go.uuid"
	"golang.org/x/net/context"
)

type resourceType string

// Resource is the context key for requested resource
const Resource = resourceType("resource")

// ResourceGenerator is the type for the function that will generate the resource value
type ResourceGenerator = func(w http.ResponseWriter, r http.Request) uuid.UUID

// WithResource is a middleware used to generate a resource and put it in the context
// for fturue handlers/middlewares to consume it. The resource value is generated by
// the provided function
func WithResource(gen ResourceGenerator) muxie.Wrapper {
	return func(f http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			ctx := context.WithValue(r.Context(), Resource, gen(w, *r))
			f.ServeHTTP(w, r.WithContext(ctx))
		})
	}
}

// RepositoryResource is the default resource generator for a repository
var RepositoryResource ResourceGenerator = func(w http.ResponseWriter, r http.Request) uuid.UUID {
	repo := r.Context().Value(DbRepo).(models.Repository)
	return repo.UUID
}
